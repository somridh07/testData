# -*- coding: utf-8 -*-
"""Online_Payment_Fraud.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A85SitEw7FxwV982Qc7YurkfNvl6caLI
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df = pd.read_csv("/content/PS_20174392719_1491204439457_log.csv")
df

df = df.drop(columns=['type','nameDest', 'nameOrig'])

df.isnull().sum()

x = df.drop(columns=['isFraud'])
y = df["isFraud"]

x

y



numeric_features = list(x.select_dtypes(include=['int64', 'float64']).columns)
categorical_features = list(x.select_dtypes(include=['object']).columns)

from sklearn.model_selection import train_test_split

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.impute import SimpleImputer

numeric_transformer = Pipeline(steps=[
    ('Imputer', SimpleImputer(strategy='mean')),
    ('scaler',StandardScaler())
])

catergorical_transformer = Pipeline(steps = [
    ('imputer',SimpleImputer(strategy = 'most_frequent'))
])

preprocessor = ColumnTransformer(transformers=[
    ('num',numeric_transformer,numeric_features),
    ('cat',catergorical_transformer,categorical_features)
])

df.isnull().sum()

model = RandomForestClassifier(random_state=42, n_estimators=100)

pipeline = Pipeline(steps=[
    ('preprocessor',preprocessor),
    ('classifier',model)
])

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

X_train, X_test,Y_train, Y_test = train_test_split(x,y,test_size=0.2,random_state=42)

y.isnull().sum()

X_train.info()

Y_train

df

X_train.iloc[-10000:,:]

Y_train[-10000:]

Y_train.unique()

pipeline.fit(X_train.iloc[-100000:,:],Y_train[-100000:])

y_pred = pipeline.predict(X_test)

print("Accuracy:", accuracy_score(Y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(Y_test, y_pred))

